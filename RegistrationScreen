import React, { useState,useEffect } from "react";
import {
  StyleSheet,
  View,
  Text,
  TouchableOpacity,
  FlatList,
  TextInput,
  Image,
  ScrollView
} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as ImagePicker from "react-native-image-picker";
import { connect } from "react-redux";
import { useDispatch, useSelector } from 'react-redux'
import * as AllActions from '../../Feed/Redux/actions'
import { bindActionCreators } from 'redux';
// import { ScrollView } from "react-native-gesture-handler";
const WelcomeScreen = ({ navigation, route,ProductsData, getPageListData }) => {
  const { BillAmount } = useSelector(state => state.CallForBillAmount)
  const [ImageDataBase64, setImageDataBase64] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [currentTodo, setCurrentTodo] = useState({});
  const [todo, setTodo] = useState("");
  const [price, setPrice] = useState("");
  const [OfferPrice,SetOfferPrice] = useState("")
  const [todos, setTodos] = useState([])
  const dispatch = useDispatch();

  console.log('props final is >>', ProductsData);
  // const [todos, setTodos] = useState(() => {
  //  const getUser = async () =>{
  //     const savedTodos = await AsyncStorage.getItem('todos');
  //     if (savedTodos) {
  //       return JSON.parse(savedTodos);
  //     } else {
  //       return [];
  //     }
  //   }
  // });

  // useEffect(() => {
  //   AsyncStorage.setItem("todos",todos !== undefined ? JSON.stringify(todos) : "");
  // }, [todos]);

 
  function handleEditInputChange(item) {
    setCurrentTodo({ ...currentTodo, text: item });
  }

  function handleEditOfferPriceChange(item) {
    setCurrentTodo({ ...currentTodo, offerPrice: item });
  }

  function handleEditPriceChange(item) {
    setCurrentTodo({ ...currentTodo, price: item });
  }

  const onChangeInput = (item) => {
    setTodo(item);
    setCurrentTodo({ ...currentTodo, text: item });
  }

  const onChangeInputPrice = (item) => {
    setPrice(item);
    setCurrentTodo({ ...currentTodo, text: item });
  }

  const onChangeInputOfferPrice = (item) => {
    SetOfferPrice(item);
    setCurrentTodo({ ...currentTodo, text: item });
  }

  const handleEditClick = (todo) => {
    setIsEditing(true);
    setCurrentTodo({ ...todo });
  }

  function onAddItem() {
    if (todo !== "") {
      setTodos([
        ...todos,
        {
          "id": todos.length + 1,
          "text": todo.trim(),
          "imageItem": ImageDataBase64,
          "price": price,
          "offerPrice": OfferPrice,
        }
      ]);
      let obj2 = {
        "id": todos.length + 1,
        "text": todo.trim(),
        "imageItem": ImageDataBase64,
        "price": price,
        "offerPrice": OfferPrice
    }
    let obj;
    if (Array.isArray(ProductsData)) {
      obj = ProductsData.concat(obj2);
    } else {
      obj = [...ProductsData.data,obj2]
    }
    dispatch(AllActions.setItemsData(obj));
    }
    setTodo("");
    setPrice("");
    SetOfferPrice("");
    setImageDataBase64(null)
  }

  function handleDeleteClick(id) {
    const removeItem = todos.filter((todo) => {
      return todo.id !== id;
    });
    dispatch(AllActions.setItemsData(removeItem));
    setTodos(removeItem);
  }

  function handleUpdateTodo(id, updatedTodo) {
    const updatedItem = todos.map((todo) => {
      return todo.id === id ? updatedTodo : todo;
    });
    setIsEditing(false);
    setTodos(updatedItem);
  }

  function handleEditFormSubmit() {
    handleUpdateTodo(currentTodo.id, currentTodo);
  }

  const launchCamera = () => {
    const options = {
      noData: true,
      includeBase64: true,
      quality: 0.2,
    };
    ImagePicker.launchCamera(options, (response) => {
      if (response.assets) {
        let ImageClickedData = response.assets[0].base64;
        let BaseURL = "data:image/png;base64,";
        let CompleteURL = BaseURL + ImageClickedData;
        setImageDataBase64(CompleteURL);
      }
    });
  }

    return (
    <ScrollView style={{ flex: 1 }}>
        {isEditing ? <>
          <TextInput
          const placeholder="Edit Item"
          const value={currentTodo.text}
          const onChangeText={(text) => { handleEditInputChange(text) }}
          const style={styles.TextInputStyle}
          />
          <TextInput
          placeholder="Edit Price"
          const value={currentTodo.price}
          const onChangeText={(text) => { handleEditPriceChange(text) }}
          const style={styles.TextInputStyle}
          />
          <TextInput
          placeholder="Edit Offer Price"
          const value={currentTodo.offerPrice}
          const onChangeText={(text) => { handleEditOfferPriceChange(text) }}
          const style={styles.TextInputStyle}
          />
         
          <TouchableOpacity style={{ backgroundColor: 'green', alignSelf: 'center', marginTop: 15, padding: 16, borderRadius: 10 }}
               const onPress={() => setIsEditing(false)}
            >
                <Text style={{color:'white',fontWeight:'bold',fontSize:20}}> CANCEL </Text>
          </TouchableOpacity>
          <TouchableOpacity const style={{ backgroundColor: 'green', alignSelf: 'center', marginTop: 15, padding: 16, borderRadius: 10 }}
               const onPress={() => handleEditFormSubmit()}
            >
                <Text style={{color:'white',fontWeight:'bold',fontSize:20}}> UPDATE </Text>
            </TouchableOpacity>
        </>
          :
        <>
         <TextInput
          placeholder="Add Product Name"
          const value={todo}
          const onChangeText={(text) => { onChangeInput(text) }}
          const style={styles.TextInputStyle}
        />
         <TextInput
          placeholder="Add Product Price"
          const value={price}
          const onChangeText={(text) => { onChangeInputPrice(text) }}
          const style={styles.TextInputStyle}
        /> 
         <TextInput
          placeholder="Add Offer Price"
          const value={OfferPrice}
          const onChangeText={(text) => { onChangeInputOfferPrice(text) }}
          const style={styles.TextInputStyle}
        />  
            <TouchableOpacity style={{ backgroundColor: 'green', alignSelf: 'center', marginTop: 15, padding: 16, borderRadius: 10 }}
               const onPress={() => launchCamera()}
            >
                <Text style={{color:'white',fontWeight:'bold',fontSize:20}}> Add Image </Text>
            </TouchableOpacity>
           
            <TouchableOpacity const style={{ backgroundColor: 'green', alignSelf: 'center', marginTop: 15, padding: 16, borderRadius: 10 }}
               const onPress={() => onAddItem()}
            >
                <Text style={{color:'white',fontWeight:'bold',fontSize:20}}> Add Item </Text>
            </TouchableOpacity>
           
          </>
        }
       
     
           
        {todos !== undefined ?
          <>
            {todos.map((todo, index) => (
             
              <View style={{ backgroundColor: 'pink', marginTop: 10, borderRadius: 15,height:200, width: '90%', alignSelf: 'center' }}>
              <View style={{ flexDirection: 'row', width: '90%', height: '50%' }}>
                <Image
                  source={{ uri: `${todo?.imageItem}` }}
                  const resizeMode='cover'
                  const style={{
                    width: '50%',
                    height: '100%',
                    marginTop:'10%'
                  }}
                  />
            <View>
              <Text style={{ fontWeight: 'bold', color: 'black',marginHorizontal:20 }}>{todo?.text}</Text>
              <Text const style={{ fontWeight: 'bold', color: 'black',marginHorizontal:20 }}>{todo?.offerPrice}</Text>
              <Text const style={{ fontWeight: 'bold', color: 'black',marginHorizontal:20 }}>{todo?.price}</Text>
       
              <View const style={{ flexDirection: 'row' }}>
                <TouchableOpacity style={{ backgroundColor: 'green', alignSelf: 'center', marginTop: 15, padding: 16, borderRadius: 10 }}
                  const onPress={() => handleEditClick(todo)}
                >
                  <Text style={{ color: 'white', fontWeight: 'bold', fontSize: 20 }}> EDIT </Text>
                </TouchableOpacity>
                <TouchableOpacity const style={{ backgroundColor: 'green', alignSelf: 'center', marginTop: 15, padding: 16, borderRadius: 10 }}
                  const onPress={() => handleDeleteClick(todo?.id)}
                >
                  <Text style={{ color: 'white', fontWeight: 'bold', fontSize: 20 }}> DELETE </Text>
                </TouchableOpacity>
              </View>
            </View>
             
           
            </View>
            </View>
            ))}
          </> :
          <></>}

       </ScrollView>
    );
}
const styles = StyleSheet.create({
  TextInputStyle: {
    borderColor: 'green',
    borderWidth: 2,
    width: '80%',
    alignSelf: 'center',
    borderRadius: 10,
    paddingLeft: 20,
    fontWeight: '700',
    marginTop: 15,
    color:'black'
  },
  title: {
    color: 'black',
    width: 60,
    height: 60,
    fontWeight: 'bold',
    fontSize: 20,
    marginHorizontal: 5
  },
  btnStyle: {
    // backgroundColor: 'green',
    padding: 15,
    borderRadius: 30,
    marginHorizontal: 5,
    width: 60,
    height: 60
  },
});

// export default WelcomeScreen;

const mapStateToProps = state => ({
  ProductsData: state.CallForBillAmount.wholeData,
});

const mapDispatchToProps = dispatch => ({
  setItemsData: bindActionCreators(AllActions.setItemsData, dispatch)
});
export default connect(mapStateToProps, mapDispatchToProps)(WelcomeScreen)

function handleEditInputChange(text: any) {
  throw new Error("Function not implemented.");
}


function handleEditPriceChange(text: any) {
  throw new Error("Function not implemented.");
}


function handleEditOfferPriceChange(text: any) {
  throw new Error("Function not implemented.");
}


function setIsEditing(arg0: boolean) {
  throw new Error("Function not implemented.");
}


function handleEditFormSubmit() {
  throw new Error("Function not implemented.");
}


function onChangeInput(text: any) {
  throw new Error("Function not implemented.");
}


function onChangeInputPrice(text: any) {
  throw new Error("Function not implemented.");
}


function onChangeInputOfferPrice(text: any) {
  throw new Error("Function not implemented.");
}


function launchCamera() {
  throw new Error("Function not implemented.");
}


function onAddItem() {
  throw new Error("Function not implemented.");
}


function handleEditClick(todo: any) {
  throw new Error("Function not implemented.");
}


function handleDeleteClick(id: any) {
  throw new Error("Function not implemented.");
}
